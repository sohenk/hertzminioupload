// Code generated by hertz generator.

package main

import (
	"flag"
	"fmt"
	"hzminioupload/biz/pkg/global"
	"hzminioupload/biz/pkg/global/systeminit"
	"hzminioupload/bootstrap"
	"log"
	"strconv"
	"strings"

	"github.com/cloudwego/hertz/pkg/app/server"
	remote "github.com/yoyofxteam/nacos-viper-remote"

	"github.com/spf13/viper"
)

var (
	Service = bootstrap.NewServiceInfo(
		"api.upload.service.v1",
		"1.0.0",
		"",
	)

	Flags = bootstrap.NewCommandFlags()
)

func init() {
	Flags.Init()
}
func InitConfig(configtype, configHost string) *viper.Viper {
	runtime_viper := viper.New()

	runtime_viper.SetConfigType("yaml")
	switch configtype {
	case "local":
		runtime_viper.SetConfigName(configHost)
		runtime_viper.AddConfigPath(".")
		err := runtime_viper.ReadInConfig()
		if err != nil {
			log.Fatal("read config failed: %v", err)
			panic(err)
		}
		return runtime_viper
	case "nacos":
		h := strings.Split(configHost, ":")
		addr := h[0]
		port := 8848
		if len(h) > 1 {
			uport, _ := strconv.Atoi(h[1])
			port = uport
		}
		fmt.Println("addr:", addr, "port:", port, "configtype:", configtype, "configHost:", configHost)
		remote.SetOptions(&remote.Option{
			Url:         addr,                                // nacos server 多地址需要地址用;号隔开，如 Url: "loc1;loc2;loc3"
			Port:        uint64(port),                        // nacos server端口号
			NamespaceId: "public",                            // nacos namespace
			GroupName:   "DEFAULT_GROUP",                     // nacos group
			Config:      remote.Config{DataId: Service.Name}, // nacos DataID
			Auth:        nil,                                 // 如果需要验证登录,需要此参数
		})
		err := runtime_viper.AddRemoteProvider("nacos", configHost, Service.Name)
		if err != nil {
			log.Fatal("read config failed: %v", err)
			panic(err)
		}
		err = runtime_viper.ReadRemoteConfig()
		if err != nil {
			log.Fatal("read config failed: %v", err)
			panic(err)
		}
		return runtime_viper
	default:
		panic("config type error")
	}
	panic("config type error")
}

func main() {
	flag.Parse()
	//read config from nacos
	global.S_CONFIG = InitConfig(Flags.ConfigType, Flags.ConfigHost)
	mic, err := systeminit.MinioClientInit(global.S_CONFIG)
	if err != nil {
		log.Fatal("minio client init failed: %v", err)
		panic(err)
	}
	global.S_MinioClient = mic

	hostport := global.S_CONFIG.GetString("http.host") + ":" + global.S_CONFIG.GetString("http.port")

	h := server.Default(
		server.WithHostPorts(hostport),
	)

	register(h)
	h.Spin()
}
