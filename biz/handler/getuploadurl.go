// Code generated by hertz generator.

package handler

import (
	"context"
	"crypto/md5"
	"fmt"
	"hzminioupload/biz/pkg/global"
	"hzminioupload/biz/pkg/utils/filenamevailid"
	"hzminioupload/biz/uploadresponse"
	"strings"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// upload to minio .
func GetUploadUrl(ctx context.Context, c *app.RequestContext) {
	ofilename := c.PostForm("filename")
	if ofilename == "" {
		c.JSON(400, uploadresponse.ErrorResponse{
			Code:    400,
			Message: "filename is empty",
			Reason:  "filename is empty",
		})
		return
	}
	dm5filename := md5.Sum([]byte(ofilename)) //转成加密编码
	filename := fmt.Sprintf("%x", dm5filename)
	//get file ext without using utils
	ext := ofilename[strings.LastIndex(ofilename, "."):]

	//spit allowfile with ","
	allowfile := global.S_CONFIG.GetString("filedriver.allowfile")
	err := filenamevailid.Filenamevailid(ofilename, allowfile)
	if err != nil {
		c.JSON(400, uploadresponse.ErrorResponse{
			Code:    400,
			Message: "file ext is not allow",
			Reason:  "file ext is not allow",
		})
		return
	}

	newfilename := filename + ext
	// get now time  YYYY/MM/DD string
	now := time.Now()
	nowstr := now.Format("2006/01/02")

	savepath := nowstr + "/" + newfilename

	expiry := time.Second * 5 * 60 // 1 day.
	uploadfileurl, showurl, err := global.S_MinioClient.GetUpLoadFileUrl(ctx, savepath, expiry)

	if err != nil {
		c.JSON(400, uploadresponse.ErrorResponse{
			Code:    400,
			Message: "upload file error",
			Reason:  err.Error(),
		})
		return
	}

	c.JSON(200, uploadresponse.UploadResponse{
		Code:    200,
		Message: "success",
		Reason:  "success",
		Data: uploadresponse.UploadFileUrl{
			UploadUrl: uploadfileurl,
			Expires:   time.Now().Add(expiry),
			FileUrl:   showurl,
		},
	})
	return
}

// checkfile md5
func Checkfile(ctx context.Context, c *app.RequestContext) {
	c.JSON(200, utils.H{
		"message": global.S_CONFIG.GetString("filedriver.storepath"),
	})
}
